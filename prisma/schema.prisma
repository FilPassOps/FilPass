generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPERADMIN
  ADDRESS_MANAGER
  VIEWER
}

enum FileType {
  ATTACHMENT
}

enum CreditTransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  emailHash           String?
  password            String?
  isVerified          Boolean              @default(false) @map("is_verified")
  isActive            Boolean              @default(true) @map("is_active")
  isDraft             Boolean              @default(false) @map("is_draft")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  terms               Boolean?
  files               UserFile[]           @relation("file_owner")
  filesAsUploader     UserFile[]           @relation("file_uploader")
  roles               UserRole[]
  wallets             UserWallet[]
  walletVerifications WalletVerification[]

  authVerifications AuthVerification[]
  temporaryFiles    TemporaryFile[]
  sessions          Session[]
  isBanned          Boolean            @default(false) @map("is_banned")
  banReason         String?            @map("ban_reason")
  banActionedBy     UserRole?          @relation("BannedUsers", fields: [banActionedById], references: [id])
  banActionedById   Int?               @map("ban_actioned_by_id")
  userCredit        UserCredit[]

  @@index([emailHash])
  @@map("user")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  role      Role
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User[]   @relation("BannedUsers")

  @@map("user_role")
}

model UserFile {
  id         Int      @id @default(autoincrement())
  publicId   String?  @unique() @default(cuid()) @map("public_id")
  user       User     @relation(fields: [userId], references: [id], name: "file_owner")
  userId     Int      @map("user_id")
  uploader   User?    @relation(fields: [uploaderId], references: [id], name: "file_uploader")
  uploaderId Int?     @map("uploader_id")
  key        String
  filename   String
  type       FileType
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([id, key])
  @@index(publicId)
  @@map("user_file")
}

model TemporaryFile {
  id         Int      @id @default(autoincrement())
  publicId   String?  @unique() @default(cuid()) @map("public_id")
  uploader   User?    @relation(fields: [uploaderId], references: [id])
  uploaderId Int?     @map("uploader_id")
  key        String   @unique
  filename   String
  type       FileType
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index(publicId)
  @@map("temporary_file")
}

model UserWallet {
  id             Int                 @id @default(autoincrement())
  user           User                @relation(fields: [userId], references: [id])
  userId         Int                 @map("user_id")
  verification   WalletVerification? @relation(fields: [verificationId], references: [id])
  verificationId Int?                @map("verification_id")
  isActive       Boolean             @default(true) @map("is_active")
  address        String
  blockchain     Blockchain          @relation(fields: [blockchainId], references: [id])
  blockchainId   Int                 @map("blockchain_id")
  name           String?
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  isDefault      Boolean             @default(false) @map("is_default")

  @@unique([userId, address, blockchainId])
  @@index([address])
  @@map("user_wallet")
}

model WalletVerification {
  id                        Int           @id @default(autoincrement())
  user                      User          @relation(fields: [userId], references: [id])
  userId                    Int           @map("user_id")
  isVerified                Boolean       @default(false) @map("is_verified")
  isActive                  Boolean       @default(true) @map("is_active")
  blockchain                Blockchain    @relation(fields: [blockchainId], references: [id])
  blockchainId              Int           @map("blockchain_id")
  address                   String
  transactionContent        Json          @map("transaction_content")
  transactionId             String        @map("transaction_id")
  transactionAmount         Decimal?      @map("transaction_amount") @db.Decimal(65, 8)
  transactionCurrencyUnit   CurrencyUnit? @relation(fields: [transactionCurrencyUnitId], references: [id])
  transactionCurrencyUnitId Int?          @map("transaction_currency_unit_id")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  wallets                   UserWallet[]

  @@map("wallet_verification")
}

model Currency {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  rate         Decimal        @db.Decimal(65, 2)
  blockchain   Blockchain?    @relation(fields: [blockchainId], references: [id])
  blockchainId Int?           @map("blockchain_id")
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  units        CurrencyUnit[]

  @@map("currency")
}

model CurrencyUnit {
  id                  Int                  @id @default(autoincrement())
  currency            Currency             @relation(fields: [currencyId], references: [id])
  currencyId          Int                  @map("currency_id")
  name                String
  scale               Int
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  walletVerifications WalletVerification[]

  @@unique([currencyId, name])
  @@map("currency_unit")
}

model AuthVerification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  code       String
  origin     Json?
  triesCount Int      @default(0) @map("tries_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, code])
  @@index([userId, code])
  @@map("auth_verification")
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  isValid   Boolean  @map("is_valid")
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, id])
  @@index([userId])
  @@map("session")
}

model BlockTracker {
  id          Int      @id @default(autoincrement())
  blockNumber Int      @map("block_number")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("block_tracker")
}

model Blockchain {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  chainId            String               @unique @map("chain_id")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  UserWallet         UserWallet[]
  WalletVerification WalletVerification[]
  Currency           Currency[]

  @@map("blockchain")
}

model StorageProvider {
  id                 Int                  @id @default(autoincrement())
  walletAddress      String               @unique @map("wallet_address")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  redeemTokenRequest RedeemTokenRequest[]
  userCredit         UserCredit[]

  @@index([walletAddress])
  @@map("storage_provider")
}

model CreditTransaction {
  id                Int                     @id @default(autoincrement())
  transactionHash   String                  @unique @map("transaction_hash")
  status            CreditTransactionStatus @default(PENDING)
  from              String                  @map("from")
  storageProvider   StorageProvider         @relation(fields: [storageProviderId], references: [id])
  storageProviderId Int                     @map("storage_provider_id")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")
  userCredit        UserCredit              @relation(fields: [userCreditId], references: [id])
  amount            String                  @map("amount")
  userCreditId      Int                     @map("user_credit_id")

  @@index([transactionHash])
  @@map("credit_transaction")
}

model UserCredit {
  id                   Int                    @id @default(autoincrement())
  userId               Int                    @map("user_id")
  user                 User                   @relation(fields: [userId], references: [id])
  storageProviderId    Int                    @map("storage_provider_id")
  storageProvider      StorageProvider        @relation(fields: [storageProviderId], references: [id])
  amount               String                 @map("amount")
  totalHeight          String?                @default("0") @map("total_height")
  totalWithdrawals     String                 @default("0") @map("total_withdrawals")
  totalRefunds         String                 @default("0") @map("total_refunds")
  creditTransactions   CreditTransaction[]
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  refundStartsAt       DateTime?              @map("refund_starts_at")
  withdrawStartsAt     DateTime?              @map("withdraw_starts_at")
  withdrawExpiresAt    DateTime?              @map("withdraw_expires_at")
  creditTokens         CreditToken[]
  currentToken         CreditToken?           @relation("current_token", fields: [currentTokenId], references: [id])
  currentTokenId       Int?                   @unique @map("current_token_id")
  refundCreditsRequest RefundCreditsRequest[]

  @@index([userId])
  @@map("user_credit")
}

model CreditToken {
  id                 Int                  @id @default(autoincrement())
  publicId           String               @unique @map("public_id")
  userCreditId       Int                  @map("user_credit_id")
  height             String               @map("height")
  amount             String               @map("amount")
  token              String               @map("token")
  redeemable         Boolean              @default(true) @map("redeemable")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  splitGroup         String?              @default("1") @map("split_group")
  redeemTokenRequest RedeemTokenRequest[]
  userCredit         UserCredit           @relation(fields: [userCreditId], references: [id])
  currentUserCredit  UserCredit?          @relation("current_token")

  @@index([userCreditId])
  @@index([splitGroup])
  @@map("credit_token")
}

model RedeemTokenRequest {
  id                Int             @id @default(autoincrement())
  storageProvider   StorageProvider @relation(fields: [storageProviderId], references: [id])
  storageProviderId Int             @map("storage_provider_id")
  creditToken       CreditToken     @relation(fields: [creditTokenId], references: [id])
  creditTokenId     Int             @map("credit_token_id")
  createdAt         DateTime        @default(now()) @map("created_at")

  @@index([creditTokenId])
  @@map("redeem_request")
}

model RefundCreditsRequest {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at")
  amount       String     @map("amount")
  userCreditId Int        @map("user_credit_id")
  userCredit   UserCredit @relation(fields: [userCreditId], references: [id])

  @@map("refund_request")
}
