generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  APPROVER
  CONTROLLER
  SUPERADMIN
  ADDRESS_MANAGER
  VIEWER
  FINANCE
}

enum TransferStatus {
  PENDING
  SUCCESS
  FAILED
  REJECTED
}

enum TransferRequestReviewStatus {
  APPROVED
  REJECTED
  REQUIRES_CHANGES
  BLOCKED
}

enum DeliveryMethod {
  ONE_TIME
  LINEAR_VESTING
}

enum TransferRequestStatus {
  SUBMITTED
  VOIDED
  APPROVED
  PROCESSING
  REJECTED_BY_APPROVER
  REQUIRES_CHANGES
  PAID
  REJECTED_BY_CONTROLLER
  SUBMITTED_BY_APPROVER
  BLOCKED
}

enum FileType {
  W8_FORM
  W9_FORM
  ATTACHMENT
}

enum ProgramCurrencyType {
  REQUEST
  PAYMENT
}

enum Blockchain {
  FILECOIN
}

enum ProgramVisibility {
  EXTERNAL
  INTERNAL
}

enum ProcessingStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum NotificationName {
  DOUBLE_SPENDING
  TR_REQUIRES_CHANGE
}

model User {
  id                            Int                    @id @default(autoincrement())
  email                         String                 @unique
  emailHash                     String?
  password                      String?
  firstName                     String?                @map("first_name")
  lastName                      String?                @map("last_name")
  dateOfBirth                   String?                @map("date_of_birth")
  countryResidence              String?                @map("country_residence")
  isUSResident                  Boolean?               @map("is_us_resident")
  isVerified                    Boolean                @default(false) @map("is_verified")
  isActive                      Boolean                @default(true) @map("is_active")
  isDraft                       Boolean                @default(false) @map("is_draft")
  createdAt                     DateTime               @default(now()) @map("created_at")
  updatedAt                     DateTime               @updatedAt @map("updated_at")
  piiUpdatedAt                  DateTime?              @map("pii_updated_at")
  // Set this column value to NULL to prompt the user to accept new Terms and Conditions
  terms                         Json?
  ownedTransferRequests         TransferRequest[]      @relation("requester")
  receivedTransferRequests      TransferRequest[]      @relation("receiver")
  files                         UserFile[]             @relation("file_owner")
  filesAsUploader               UserFile[]             @relation("file_uploader")
  roles                         UserRole[]
  wallets                       UserWallet[]
  walletVerifications           WalletVerification[]
  ownedTransferRequestDrafts    TransferRequestDraft[] @relation("draft_requester")
  receivedTransferRequestDrafts TransferRequestDraft[] @relation("draft_receiver")
  authVerifications             AuthVerification[]
  temporaryFiles                TemporaryFile[]
  sessions                      Session[]
  isOnboarded                   Boolean                @default(false) @map("is_onboarded")
  isBanned                      Boolean                @default(false) @map("is_banned")
  banReason                     String?                @map("ban_reason")
  banActionedBy                 UserRole?              @relation("BannedUsers", fields: [banActionedById], references: [id])
  banActionedById               Int?                   @map("ban_actioned_by_id")

  @@index([emailHash])
  @@map("user")
}

model UserRole {
  id                       Int                        @id @default(autoincrement())
  user                     User                       @relation(fields: [userId], references: [id])
  userId                   Int                        @map("user_id")
  role                     Role
  isActive                 Boolean                    @default(true) @map("is_active")
  createdAt                DateTime                   @default(now()) @map("created_at")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  userRolePrograms         UserRoleProgram[]
  transferRequestReviews   TransferRequestReview[]
  transferRequestChanges   TransferRequestHistory[]
  transfers                Transfer[]
  transferRequestApprovals TransferRequestApprovals[]
  User                     User[]                     @relation("BannedUsers")

  @@map("user_role")
}

model UserRoleProgram {
  id         Int                           @id @default(autoincrement())
  userRole   UserRole                      @relation(fields: [userRoleId], references: [id])
  userRoleId Int                           @map("user_role_id")
  program    Program                       @relation(fields: [programId], references: [id])
  programId  Int                           @map("program_id")
  isActive   Boolean                       @default(true) @map("is_active")
  createdAt  DateTime                      @default(now()) @map("created_at")
  updatedAt  DateTime                      @updatedAt @map("updated_at")
  groups     UserRoleProgramGroupMembers[]

  @@index([userRoleId, isActive])
  @@map("user_role_program")
}

model UserRoleProgramGroup {
  id                          Int                           @id @default(autoincrement())
  program                     Program                       @relation(fields: [programId], references: [id])
  programId                   Int                           @map("program_id")
  role                        Role
  userRoleProgramGroupMembers UserRoleProgramGroupMembers[]
  transferRequestApprovals    TransferRequestApprovals[]

  @@map("user_role_program_group")
}

model UserRoleProgramGroupMembers {
  id                     Int                  @id @default(autoincrement())
  userRoleProgram        UserRoleProgram      @relation(fields: [userRoleProgramId], references: [id])
  userRoleProgramId      Int                  @map("user_role_program_id")
  userRoleProgramGroup   UserRoleProgramGroup @relation(fields: [userRoleProgramGroupId], references: [id])
  userRoleProgramGroupId Int                  @map("user_role_program_group_id")

  @@map("user_role_program_group_members")
}

model UserFile {
  id               Int                    @id @default(autoincrement())
  publicId         String?                @unique() @default(cuid()) @map("public_id")
  user             User                   @relation(fields: [userId], references: [id], name: "file_owner")
  userId           Int                    @map("user_id")
  uploader         User?                  @relation(fields: [uploaderId], references: [id], name: "file_uploader")
  uploaderId       Int?                   @map("uploader_id")
  key              String
  filename         String
  type             FileType
  isApproved       Boolean?               @map("is_approved")
  isActive         Boolean                @default(true) @map("is_active")
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  transferRequests TransferRequest[]
  attachment       TransferRequest[]      @relation("attachment")
  attachmentDraft  TransferRequestDraft[]
  rejectionReason  String?                @map("rejection_reason")

  @@unique([id, key])
  @@index(publicId)
  @@map("user_file")
}

model TemporaryFile {
  id         Int      @id @default(autoincrement())
  publicId   String?  @unique() @default(cuid()) @map("public_id")
  uploader   User?    @relation(fields: [uploaderId], references: [id])
  uploaderId Int?     @map("uploader_id")
  key        String   @unique
  filename   String
  type       FileType
  isApproved Boolean  @default(false) @map("is_approved")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index(publicId)
  @@map("temporary_file")
}

model UserWallet {
  id               Int                 @id @default(autoincrement())
  user             User                @relation(fields: [userId], references: [id])
  userId           Int                 @map("user_id")
  verification     WalletVerification? @relation(fields: [verificationId], references: [id])
  verificationId   Int?                @map("verification_id")
  isActive         Boolean             @default(true) @map("is_active")
  address          String
  blockchain       Blockchain
  name             String?
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  transferRequests TransferRequest[]
  isDefault        Boolean             @default(false) @map("is_default")

  @@unique([userId, address])
  @@index([address])
  @@map("user_wallet")
}

model WalletVerification {
  id                        Int           @id @default(autoincrement())
  user                      User          @relation(fields: [userId], references: [id])
  userId                    Int           @map("user_id")
  isVerified                Boolean       @default(false) @map("is_verified")
  isActive                  Boolean       @default(true) @map("is_active")
  blockchain                Blockchain
  address                   String
  transactionContent        Json          @map("transaction_content")
  transactionId             String        @map("transaction_id")
  transactionAmount         Decimal?      @map("transaction_amount") @db.Decimal(65, 8)
  transactionCurrencyUnit   CurrencyUnit? @relation(fields: [transactionCurrencyUnitId], references: [id])
  transactionCurrencyUnitId Int?          @map("transaction_currency_unit_id")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  wallets                   UserWallet[]

  @@map("wallet_verification")
}

model Program {
  id                     Int                    @id @default(autoincrement())
  name                   String                 @unique
  deliveryMethod         DeliveryMethod         @map("delivery_method")
  isActive               Boolean                @default(true) @map("is_active")
  isArchived             Boolean                @default(false) @map("is_archived")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  signersWalletAddresses String[]               @map("signers_wallet_addresses")
  visibility             ProgramVisibility?     @default(EXTERNAL) @map("visibility")
  userRolePrograms       UserRoleProgram[]
  transferRequests       TransferRequest[]
  programCurrency        ProgramCurrency[]
  transferRequestDrafts  TransferRequestDraft[]
  userRoleProgramGroups  UserRoleProgramGroup[]

  @@map("program")
}

model TransferRequest {
  id                   Int                        @id @default(autoincrement())
  uuid                 String                     @unique @default(dbgenerated("gen_random_uuid()"))
  publicId             String                     @unique @default(dbgenerated("getnextpublicidbigint()")) @map("public_id")
  requester            User                       @relation(fields: [requesterId], references: [id], name: "requester")
  requesterId          Int                        @map("requester_id")
  program              Program                    @relation(fields: [programId], references: [id])
  programId            Int                        @map("program_id")
  wallet               UserWallet                 @relation(fields: [userWalletId], references: [id])
  userWalletId         Int                        @map("user_wallet_id")
  form                 UserFile?                  @relation(fields: [userFileId], references: [id])
  userFileId           Int?                       @map("user_file_id")
  receiver             User                       @relation(fields: [receiverId], references: [id], name: "receiver")
  receiverId           Int                        @map("receiver_id")
  team                 String
  teamHash             String?                    @map("team_hash")
  status               TransferRequestStatus      @default(SUBMITTED)
  amount               String
  currency             CurrencyUnit               @relation(fields: [currencyUnitId], references: [id])
  currencyUnitId       Int                        @map("currency_unit_id")
  terms                Json?
  firstName            String?                    @map("first_name")
  lastName             String?                    @map("last_name")
  dateOfBirth          String?                    @map("date_of_birth")
  countryResidence     String?                    @map("country_residence")
  isUSResident         Boolean?                   @map("is_us_resident")
  isLegacy             Boolean                    @default(false) @map("is_legacy")
  isActive             Boolean                    @default(true) @map("is_active")
  createdAt            DateTime                   @default(now()) @map("created_at")
  updatedAt            DateTime                   @updatedAt @map("updated_at")
  expectedTransferDate DateTime                   @updatedAt @map("expected_transfer_date")
  actorAddress         String                     @default("") @map("actor_address")
  robustAddress        String                     @default("") @map("robust_address")
  attachment           UserFile?                  @relation(fields: [attachmentId], references: [id], name: "attachment")
  attachmentId         Int?                       @map("attachment_id")
  vestingStartEpoch    Int?                       @map("vesting_start_epoch")
  vestingMonths        Int?                       @map("vesting_months")
  reviews              TransferRequestReview[]
  history              TransferRequestHistory[]
  transfers            Transfer[]
  approvals            TransferRequestApprovals[]

  @@index([createdAt])
  @@index([updatedAt])
  @@index([programId])
  @@index([teamHash])
  @@index([publicId])
  @@index([status])
  @@index([isActive])
  @@index([publicId, status, isActive])
  @@map("transfer_request")
}

model TransferRequestReview {
  id                Int                         @id @default(autoincrement())
  approver          UserRole                    @relation(fields: [approverId], references: [id])
  approverId        Int                         @map("approver_id")
  transferRequest   TransferRequest             @relation(fields: [transferRequestId], references: [id])
  transferRequestId Int                         @map("transfer_request_id")
  status            TransferRequestReviewStatus
  notes             String?
  isActive          Boolean                     @default(true) @map("is_active")
  createdAt         DateTime                    @default(now()) @map("created_at")
  updatedAt         DateTime                    @updatedAt @map("updated_at")

  @@map("transfer_request_review")
}

model TransferRequestDraft {
  id             Int          @id @default(autoincrement())
  publicId       String       @unique @default(dbgenerated("getnextpublicidbigint()")) @map("public_id")
  requester      User         @relation(fields: [requesterId], references: [id], name: "draft_requester")
  requesterId    Int          @map("requester_id")
  receiver       User         @relation(fields: [receiverId], references: [id], name: "draft_receiver")
  receiverId     Int          @map("receiver_id")
  attachment     UserFile?    @relation(fields: [attachmentId], references: [id])
  attachmentId   Int?         @map("attachment_id")
  program        Program      @relation(fields: [programId], references: [id])
  programId      Int          @map("program_id")
  currency       CurrencyUnit @relation(fields: [currencyUnitId], references: [id])
  currencyUnitId Int          @map("currency_unit_id")
  team           String
  teamHash       String?      @map("team_hash")
  amount         String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  isActive       Boolean      @default(true) @map("is_active")
  isSubmitted    Boolean      @default(false) @map("is_submitted")

  @@index([createdAt])
  @@index([programId])
  @@index([publicId])
  @@index([teamHash])
  @@map("transfer_request_draft")
}

model TransferRequestHistory {
  id                Int             @id @default(autoincrement())
  userRole          UserRole        @relation(fields: [userRoleId], references: [id])
  userRoleId        Int             @map("user_role_id")
  transferRequest   TransferRequest @relation(fields: [transferRequestId], references: [id])
  transferRequestId Int             @map("transfer_request_id")
  isActive          Boolean         @default(true) @map("is_active")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  field             String          @map("field")
  oldValue          String          @map("old_value")
  newValue          String          @map("new_value")

  @@map("transfer_request_history")
}

model TransferRequestApprovals {
  id                     Int                  @id @default(autoincrement())
  transferRequest        TransferRequest      @relation(fields: [transferRequestId], references: [id])
  transferRequestId      Int                  @map("transfer_request_id")
  userRole               UserRole             @relation(fields: [userRoleId], references: [id])
  userRoleId             Int                  @map("user_role_id")
  userRoleProgramGroup   UserRoleProgramGroup @relation(fields: [userRoleProgramGroupId], references: [id])
  userRoleProgramGroupId Int                  @map("user_role_program_group_id")
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")

  @@map("transfer_request_approvals")
}

model Transfer {
  id                   Int             @id @default(autoincrement())
  transferRequest      TransferRequest @relation(fields: [transferRequestId], references: [id])
  transferRequestId    Int             @map("transfer_request_id")
  controller           UserRole        @relation(fields: [controllerId], references: [id])
  controllerId         Int             @map("user_role_id")
  status               TransferStatus  @default(PENDING)
  txHash               String?         @map("tx_hash")
  transferRef          String?         @map("transfer_ref")
  from                 String?         @map("from")
  to                   String?         @map("to")
  notes                String?
  isActive             Boolean         @default(true) @map("is_active")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  amount               String?
  amountCurrencyUnit   CurrencyUnit?   @relation(fields: [amountCurrencyUnitId], references: [id])
  amountCurrencyUnitId Int?            @map("amount_currency_unit_id")

  @@index([transferRef])
  @@map("transfer")
}

model Currency {
  id        Int            @id @unique
  name      String         @unique
  rate      Decimal        @db.Decimal(65, 2)
  isActive  Boolean        @default(true) @map("is_active")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  units     CurrencyUnit[]

  @@map("currency")
}

model CurrencyUnit {
  id                   Int                    @id @unique
  currency             Currency               @relation(fields: [currencyId], references: [id])
  currencyId           Int                    @map("currency_id")
  name                 String                 @unique
  scale                Int
  isActive             Boolean                @default(true) @map("is_active")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  walletVerifications  WalletVerification[]
  transferRequest      TransferRequest[]
  programCurrency      ProgramCurrency[]
  TransferRequestDraft TransferRequestDraft[]

  Transfer Transfer[]

  @@map("currency_unit")
}

model ProgramCurrency {
  id             Int                 @id @default(autoincrement())
  currency       CurrencyUnit        @relation(fields: [currencyUnitId], references: [id])
  currencyUnitId Int                 @map("currency_unit_id")
  program        Program             @relation(fields: [programId], references: [id])
  programId      Int                 @map("program_id")
  type           ProgramCurrencyType
  isActive       Boolean             @default(true) @map("is_active")
  createdAt      DateTime            @default(now()) @map("created_at")
  updateAt       DateTime            @updatedAt @map("updated_at")

  @@map("program_currency")
}

model ScriptTransaction {
  id          Int      @id @default(autoincrement())
  transaction String   @unique
  isProcessed Boolean  @default(false) @map("is_processed")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("script_transaction")
}

model AuthVerification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  code       String
  origin     Json?
  triesCount Int      @default(0) @map("tries_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, code])
  @@index([userId, code])
  @@map("auth_verification")
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  isValid   Boolean  @map("is_valid")
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, id])
  @@index([userId])
  @@map("session")
}

model NotificationSettings {
  id         Int              @id @default(autoincrement())
  name       NotificationName @unique
  lastSentAt DateTime         @default(now()) @map("last_sent_at")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  @@map("notification_settings")
}

model BlockTracker {
  id          Int      @id @default(autoincrement())
  blockNumber Int      @map("block_number")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("block_tracker")
}

model NewsletterSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  emailHash String   @unique @map("email_hash")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter_subscriber")
}
