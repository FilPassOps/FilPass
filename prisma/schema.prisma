generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPERADMIN
  ADDRESS_MANAGER
  VIEWER
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum LedgerType {
  DEPOSIT
  WITHDRAWAL
  REFUND
}

enum CreditTicketStatus {
  REFUNDED
  EXPIRED
  REDEEMED
  VALID
  INVALID
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  emailHash           String?
  password            String?
  isVerified          Boolean              @default(false) @map("is_verified")
  isActive            Boolean              @default(true) @map("is_active")
  isDraft             Boolean              @default(false) @map("is_draft")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  terms               Boolean?
  roles               UserRole[]
  wallets             UserWallet[]
  walletVerifications WalletVerification[]

  authVerifications         AuthVerification[]
  sessions                  Session[]
  isBanned                  Boolean                     @default(false) @map("is_banned")
  banReason                 String?                     @map("ban_reason")
  banActionedBy             UserRole?                   @relation("BannedUsers", fields: [banActionedById], references: [id])
  banActionedById           Int?                        @map("ban_actioned_by_id")
  userCredit                UserCredit[]
  deployContractTransaction DeployContractTransaction[]
  contract                  Contract[]

  @@index([emailHash])
  @@map("user")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  role      Role
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User[]   @relation("BannedUsers")

  @@map("user_role")
}

model UserWallet {
  id             Int                 @id @default(autoincrement())
  user           User                @relation(fields: [userId], references: [id])
  userId         Int                 @map("user_id")
  verification   WalletVerification? @relation(fields: [verificationId], references: [id])
  verificationId Int?                @map("verification_id")
  isActive       Boolean             @default(true) @map("is_active")
  address        String
  blockchain     Blockchain          @relation(fields: [blockchainId], references: [id])
  blockchainId   Int                 @map("blockchain_id")
  name           String?
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  isDefault      Boolean             @default(false) @map("is_default")

  @@unique([userId, address, blockchainId])
  @@index([address])
  @@map("user_wallet")
}

model WalletVerification {
  id                        Int           @id @default(autoincrement())
  user                      User          @relation(fields: [userId], references: [id])
  userId                    Int           @map("user_id")
  isVerified                Boolean       @default(false) @map("is_verified")
  isActive                  Boolean       @default(true) @map("is_active")
  blockchain                Blockchain    @relation(fields: [blockchainId], references: [id])
  blockchainId              Int           @map("blockchain_id")
  address                   String
  transactionContent        Json          @map("transaction_content")
  transactionId             String        @map("transaction_id")
  transactionAmount         Decimal?      @map("transaction_amount") @db.Decimal(65, 8)
  transactionCurrencyUnit   CurrencyUnit? @relation(fields: [transactionCurrencyUnitId], references: [id])
  transactionCurrencyUnitId Int?          @map("transaction_currency_unit_id")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  wallets                   UserWallet[]

  @@map("wallet_verification")
}

model Currency {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  rate         Decimal        @db.Decimal(65, 2)
  blockchain   Blockchain?    @relation(fields: [blockchainId], references: [id])
  blockchainId Int?           @map("blockchain_id")
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  units        CurrencyUnit[]

  @@map("currency")
}

model CurrencyUnit {
  id                  Int                  @id @default(autoincrement())
  currency            Currency             @relation(fields: [currencyId], references: [id])
  currencyId          Int                  @map("currency_id")
  name                String
  scale               Int
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  walletVerifications WalletVerification[]

  @@unique([currencyId, name])
  @@map("currency_unit")
}

model AuthVerification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  code       String
  origin     Json?
  triesCount Int      @default(0) @map("tries_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, code])
  @@index([userId, code])
  @@map("auth_verification")
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  isValid   Boolean  @map("is_valid")
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, id])
  @@index([userId])
  @@map("session")
}

model BlockTracker {
  id          Int      @id @default(autoincrement())
  blockNumber Int      @map("block_number")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("block_tracker")
}

model Blockchain {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  chainId            String               @unique @map("chain_id")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  UserWallet         UserWallet[]
  WalletVerification WalletVerification[]
  Currency           Currency[]

  @@map("blockchain")
}

model StorageProvider {
  id                 Int                 @id @default(autoincrement())
  walletAddress      String              @unique @map("wallet_address")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  userCredit         UserCredit[]

  @@index([walletAddress])
  @@map("storage_provider")
}

model CreditTransaction {
  id                Int               @id @default(autoincrement())
  transactionHash   String            @unique @map("transaction_hash")
  status            TransactionStatus @default(PENDING)
  from              String            @map("from")
  storageProvider   StorageProvider   @relation(fields: [storageProviderId], references: [id])
  storageProviderId Int               @map("storage_provider_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  userCredit        UserCredit        @relation(fields: [userCreditId], references: [id])
  amount            String            @map("amount")
  userCreditId      Int               @map("user_credit_id")
  failReason        String?           @map("fail_reason")
  confirmations     Int               @default(0) @map("confirmations")
  blockNumber       String            @default("0") @map("block_number")

  @@index([transactionHash])
  @@index([status])
  @@map("credit_transaction")
}

model RefundTransaction {
  id              Int               @id @default(autoincrement())
  transactionHash String            @unique @map("transaction_hash")
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  userCredit      UserCredit        @relation(fields: [userCreditId], references: [id])
  amount          String            @map("amount")
  userCreditId    Int               @map("user_credit_id")
  failReason      String?           @map("fail_reason")
  confirmations   Int               @default(0) @map("confirmations")
  blockNumber     String            @default("0") @map("block_number")

  @@index([transactionHash])
  @@index([status])
  @@map("refund_transaction")
}

model DeployContractTransaction {
  id              Int               @id @default(autoincrement())
  transactionHash String            @unique @map("transaction_hash")
  walletAddress   String            @map("wallet_address")
  userId          Int               @map("user_id")
  user            User              @relation(fields: [userId], references: [id])
  status          TransactionStatus @default(PENDING)
  confirmations   Int               @default(0) @map("confirmations")
  blockNumber     String            @default("0") @map("block_number")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  contract        Contract?
  failReason      String?           @map("fail_reason")

  @@index([userId])
  @@index([transactionHash])
  @@map("deploy_contract_transaction")
}

model Contract {
  id                  Int                       @id @default(autoincrement())
  address             String                    @unique @map("address")
  deployedFromAddress String                    @map("deployed_from_address")
  transaction         DeployContractTransaction @relation(fields: [transactionId], references: [id])
  transactionId       Int                       @unique @map("transaction_id")
  userId              Int                       @map("user_id")
  user                User                      @relation(fields: [userId], references: [id])
  createdAt           DateTime                  @default(now()) @map("created_at")
  updatedAt           DateTime                  @updatedAt @map("updated_at")
  userCredits         UserCredit[]

  @@index([userId])
  @@index([deployedFromAddress])
  @@map("contract")
}

model WithdrawTransaction {
  id              Int               @id @default(autoincrement())
  transactionHash String            @unique @map("transaction_hash")
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  userCredit      UserCredit        @relation(fields: [userCreditId], references: [id])
  amount          String            @map("amount")
  userCreditId    Int               @map("user_credit_id")
  creditTicketId  Int               @unique @map("credit_ticket_id")
  creditTicket    CreditTicket      @relation(fields: [creditTicketId], references: [id])
  failReason      String?           @map("fail_reason")
  confirmations   Int               @default(0) @map("confirmations")
  blockNumber     String            @default("0") @map("block_number")

  @@index([transactionHash])
  @@index([status])
  @@map("withdraw_transaction")
}

model UserCredit {
  id                  Int                   @id @default(autoincrement())
  userId              Int                   @map("user_id")
  user                User                  @relation(fields: [userId], references: [id])
  storageProviderId   Int                   @map("storage_provider_id")
  storageProvider     StorageProvider       @relation(fields: [storageProviderId], references: [id])
  amount              String                @default("0") @map("amount")
  totalHeight         String?               @default("0") @map("total_height")
  totalWithdrawals    String                @default("0") @map("total_withdrawals")
  totalRefunds        String                @default("0") @map("total_refunds")
  creditTransactions  CreditTransaction[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  refundStartsAt      DateTime?             @map("refund_starts_at")
  withdrawStartsAt    DateTime?             @map("withdraw_starts_at")
  withdrawExpiresAt   DateTime?             @map("withdraw_expires_at")
  contractId          Int                   @unique @map("contract_id")
  contract            Contract              @relation(fields: [contractId], references: [id])
  ledger              Ledger[]
  refundTransaction   RefundTransaction[]
  withdrawTransaction WithdrawTransaction[]
  ticketGroups        TicketGroup[]

  @@index([userId])
  @@map("user_credit")
}

model TicketGroup {
  id            Int            @id @default(autoincrement())
  userCreditId  Int            @map("user_credit_id")
  userCredit    UserCredit     @relation(fields: [userCreditId], references: [id])
  creditTickets CreditTicket[]
  expiresAt     DateTime?      @map("expires_at")
  expired       Boolean        @default(false) @map("expired")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@index([userCreditId])
  @@map("ticket_group")
}

model CreditTicket {
  id                  Int                  @id @default(autoincrement())
  publicId            String?              @unique() @map("public_id")
  height              String               @map("height")
  amount              String               @map("amount")
  token               String               @map("token")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  ticketGroup         TicketGroup          @relation(fields: [ticketGroupId], references: [id])
  ticketGroupId       Int                  @map("ticket_group_id")
  withdrawTransaction WithdrawTransaction?
  status              CreditTicketStatus   @default(VALID) @map("status")

  @@index([ticketGroupId])
  @@index([publicId])
  @@index([status])
  @@map("credit_ticket")
}

model Ledger {
  id           Int        @id @default(autoincrement())
  userCreditId Int        @map("user_credit_id")
  userCredit   UserCredit @relation(fields: [userCreditId], references: [id])
  amount       String     @map("amount")
  type         LedgerType @map("type")
  createdAt    DateTime   @default(now()) @map("created_at")

  @@index([userCreditId])
  @@map("ledger")
}
